#include "scr_manager.h"
#include "oled_gui.h"

#include "os_msg.h"
#include "main.h"
#include "game.h"
#include "eeprom.h"
#include "gui_port.h"

static const uint8_t iconSound[][120] = { // 30x30 Mute - Sound
	{
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 
        0x00, 0x1f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 
        0x01, 0xff, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0xf7, 0xff, 0x00, 0x00, 0xf7, 0xff, 0x00, 0x00, 
        0xf7, 0xff, 0x18, 0xc0, 0xf7, 0xff, 0x0d, 0x80, 0xf7, 0xff, 0x07, 0x00, 0xf7, 0xff, 0x07, 0x00, 
        0xf7, 0xff, 0x0d, 0x80, 0xf7, 0xff, 0x18, 0xc0, 0xf7, 0xff, 0x00, 0x00, 0xf7, 0xff, 0x00, 0x00, 
        0x03, 0xff, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 
        0x00, 0x3f, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    },
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x07, 0x80, 0x00, 
        0x00, 0x0f, 0x80, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x7f, 0x80, 0x80, 
        0x00, 0xff, 0x80, 0x40, 0x01, 0xff, 0x80, 0x20, 0x3d, 0xff, 0x82, 0x30, 0x7d, 0xff, 0x81, 0x10, 
        0x7d, 0xff, 0x81, 0x90, 0x7d, 0xff, 0x88, 0x98, 0x7d, 0xff, 0x8c, 0x88, 0x7d, 0xff, 0x8c, 0x88, 
        0x7d, 0xff, 0x88, 0x98, 0x7d, 0xff, 0x81, 0x90, 0x7d, 0xff, 0x81, 0x10, 0x3d, 0xff, 0x82, 0x30, 
        0x01, 0xff, 0x80, 0x20, 0x00, 0xff, 0x80, 0x40, 0x00, 0x7f, 0x80, 0x80, 0x00, 0x3f, 0x80, 0x00, 
        0x00, 0x1f, 0x80, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
        0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00
    }
};


static const uint8_t iconSpeed[][120] = { // 30x30 Walk - Run - Runx2
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 
        0x00, 0x01, 0xe0, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x07, 0x80, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x7f, 0xc0, 0x00, 
        0x00, 0xe7, 0xe0, 0x00, 0x00, 0xef, 0xe0, 0x00, 0x00, 0xef, 0x78, 0x00, 0x00, 0xcf, 0x3e, 0x00, 
        0x00, 0xcf, 0x1e, 0x00, 0x00, 0xdf, 0x06, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
        0x00, 0x1d, 0xc0, 0x00, 0x00, 0x39, 0xe0, 0x00, 0x00, 0x38, 0xe0, 0x00, 0x00, 0x70, 0x70, 0x00, 
        0x00, 0xf0, 0x70, 0x00, 0x01, 0xe0, 0x38, 0x00, 0x01, 0xc0, 0x38, 0x00, 0x01, 0x80, 0x10, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    },
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x3e, 0x00, 
        0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x1c, 0x1c, 0x00, 0x00, 0x3f, 0xc0, 0x00, 
        0x00, 0xff, 0xe0, 0x00, 0x01, 0xe1, 0xf0, 0x00, 0x01, 0x83, 0xf0, 0x00, 0x00, 0x03, 0xe0, 0x00, 
        0x00, 0x07, 0xe8, 0x00, 0x00, 0x0f, 0xdc, 0x00, 0x00, 0x0f, 0xdf, 0xc0, 0x00, 0x1f, 0x8f, 0xc0, 
        0x00, 0x0f, 0x80, 0x00, 0x00, 0x2f, 0xc0, 0x00, 0x00, 0x33, 0xf0, 0x00, 0x0f, 0xf8, 0xf0, 0x00, 
        0x1f, 0xf0, 0x70, 0x00, 0x1f, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 
        0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x40, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    },
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x30, 0x00, 0x7f, 0xe0, 0x78, 
        0x00, 0xff, 0xf8, 0xfc, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x3e, 0xfc, 0xff, 0xf0, 0x7e, 0x78, 
        0x00, 0x00, 0xff, 0x00, 0x00, 0x03, 0xff, 0x00, 0xff, 0x87, 0xfe, 0x00, 0x00, 0x0f, 0xfc, 0x00, 
        0x00, 0x0f, 0xf3, 0xe0, 0xff, 0x8f, 0xe7, 0xf8, 0x00, 0x0f, 0x87, 0xf8, 0x00, 0x07, 0xc0, 0x00, 
        0xff, 0xf3, 0xc0, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0xf0, 0x00, 
        0x00, 0x7f, 0xf8, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 
        0x00, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00
    }
};

static void setup_function(msg_t * msg)
{
    lb1.init(35, 5);
    lb2.init(15, 25);
    lb3.init(15, 45);

    cv1.init();
    cv2.init();
    cv3.init();

    bmp1.init(80, 15, 30, 30);

    lb1.print("Sound");
    lb2.print("Speed");
    lb3.print("About");

    cv1.canvas_fillRect(5, 5, 5, 5);
    cv2.canvas_fillRect(5, 25, 5, 5);
    cv3.canvas_fillRect(5, 45, 5, 5);

    // Read setting data
    eeprom_read(	EEPROM_SETTING_START_ADDR, \
                    (uint8_t*)&setting, \
                    sizeof(setting));
    setting.silent = !setting.silent;
    if(setting.speed < 40 || setting.speed > 50) setting.speed = 45;
    bmp1.setFade(4);

    gr1.init();

    gr1.addObj(&cv1, true);
    gr1.addObj(&cv2, true);
    gr1.addObj(&cv3, true);

    gr1.addObj(&lb1, false);
    gr1.addObj(&lb2, false);
    gr1.addObj(&lb3, false);

    os_task_delay(200);


}
static void loop_funtion(msg_t * msg)
{

	
}

static void event_function(msg_t * msg)
{
      switch (msg->sig)
      {
        uint8_t index;
      case AC_DISPLAY_BUTTON_MODE_LONG_PRESSED:
            scr_curr_set_stt(SCR_STT_READY); //Set back to ready state to make loop_func stop
            lb1.deinit();
            lb2.deinit(); 
            lb3.deinit();    
            cv1.deinit();
            cv2.deinit(); 
            cv3.deinit();    
            bmp1.deinit();
            gr1.deinit();     
            eeprom_write(	EEPROM_SETTING_START_ADDR, \
                (uint8_t*)&setting, \
                sizeof(setting));
            scr_shift(SCR_MENU_GAME);
            break;
      case AC_DISPLAY_BUTTON_MODE_RELEASED:
            index = gr1.getFocusIndex();
            if(index == 0)
            {
                an3.init(&bmp1, FADE_OUT, 150);
                os_task_delay(200);
                setting.silent = !setting.silent;
                if(setting.silent == true)
                {
                    bmp1.setBmp(iconSound[0]);
                }
                else
                {
                    bmp1.setBmp(iconSound[1]);
                }
                an3.init(&bmp1, FADE_IN, 150);
                os_task_delay(200);
            }   
            else if(index == 1)
            {
                an3.init(&bmp1, FADE_OUT, 150);
                os_task_delay(200);
                setting.speed += 5;
                if(setting.speed > 50) setting.speed = 40;
                if(setting.speed == 40)
                {
                    bmp1.setBmp(iconSpeed[0]);
                }
                else if (setting.speed == 45)
                {
                    bmp1.setBmp(iconSpeed[1]);
                }
                else if (setting.speed == 50)
                {
                    bmp1.setBmp(iconSpeed[2]);
                }
                an3.init(&bmp1, FADE_IN, 150);
                os_task_delay(200);
            }            
            break;
      case AC_DISPLAY_BUTTON_UP_PRESSED:
            gr1.focusObj(FOCUS_PREV);
            index = gr1.getFocusIndex();
            if(index == 0)
            {   
                an1.init(&lb2, -20, 0, 150);
                an2.init(&lb1, +20, 0, 150);
                if(setting.silent == true)
                {
                    bmp1.setBmp(iconSound[0]);
                }
                else
                {
                    bmp1.setBmp(iconSound[1]);
                }
                bmp1.setFade(4);
                an3.init(&bmp1, FADE_IN, 150);
            }
            else if(index == 1)
            {   
                an1.init(&lb3, -20, 0, 150);
                an2.init(&lb2, +20, 0, 150);
                if(setting.speed == 40)
                {
                    bmp1.setBmp(iconSpeed[0]);
                }
                else if (setting.speed == 45)
                {
                    bmp1.setBmp(iconSpeed[1]);
                }
                else if (setting.speed == 50)
                {
                    bmp1.setBmp(iconSpeed[2]);
                }
                bmp1.setFade(4);
                an3.init(&bmp1, FADE_IN, 150);
            }
            else if(index == 2)
            {   
                an3.init(&bmp1, FADE_OUT, 150);
                an1.init(&lb1, -20, 0, 150);
                an2.init(&lb3, +20, 0, 150);
            }
		    os_task_delay(200);
            break;  
      case AC_DISPLAY_BUTTON_DOWN_PRESSED:
            gr1.focusObj(FOCUS_NEXT);
            index = gr1.getFocusIndex();
            if(index == 0)
            {   
                an1.init(&lb3, -20, 0, 150);
                an2.init(&lb1, +20, 0, 150);
                if(setting.silent == true)
                {
                    bmp1.setBmp(iconSound[0]);
                }
                else
                {
                    bmp1.setBmp(iconSound[1]);
                }
                bmp1.setFade(4);
                an3.init(&bmp1, FADE_IN, 150);
            }
            else if(index == 1)
            {   
                an1.init(&lb1, -20, 0, 150);
                an2.init(&lb2, +20, 0, 150);

                if(setting.speed == 40)
                {
                    bmp1.setBmp(iconSpeed[0]);
                }
                else if (setting.speed == 45)
                {
                    bmp1.setBmp(iconSpeed[1]);
                }
                else if (setting.speed == 50)
                {
                    bmp1.setBmp(iconSpeed[2]);
                }
                bmp1.setFade(4);
                an3.init(&bmp1, FADE_IN, 150);
            }
            else if(index == 2)
            {   
                an3.init(&bmp1, FADE_OUT, 150);
                an1.init(&lb2, -20, 0, 150);
                an2.init(&lb3, +20, 0, 150);
            }
		    os_task_delay(200);
            break;     
      default:
            break;
      }
}


void scr_setting_game_register( void )
{
    scr_reg(SCR_SETTING_GAME, nullptr, nullptr, setup_function, loop_funtion, event_function);
}